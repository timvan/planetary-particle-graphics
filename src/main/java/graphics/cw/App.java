/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package graphics.cw;

import graphics.cw.display.Display;
import graphics.cw.gui.InfoButton.Info;
import graphics.cw.gui.Slider.Slider;
import graphics.cw.particles.*;
import processing.core.PApplet;

/***
 * Main app
 * Creates a particle system
 */
public class App extends PApplet {

    private int width = Constants.windowWidth;
    private int height = Constants.windowHeight;

    private Display display;
    private ParticleSystem ps;
    private ParticleEventHandler particleEventHandler;
    private Info info;

    private Slider maxSpeedSlider;
    private Slider spawnRateSlider;

    public void settings() {
        size(width, height, "processing.awt.PGraphicsJava2D");
    }

    public void setup() { ;
        display = new Display(this);
        ps = new ParticleSystem();
        particleEventHandler = new ParticleEventHandler(ps);
        info = new Info(60, 60);
        this.smooth();
        ps.setup();
        maxSpeedSlider = new Slider(50, height - 50);
        spawnRateSlider = new Slider(50, height - 80);
    }

    public void draw() {
        // UPDATE stuff
        ps.update();
        info.handleMouse(mouseX, mouseY);
        updateMaxSpeedSlider();
        updateSpawnRateSlider();

        // draw stuff
        display.drawBackground(width, height);
        ps.draw(display);
        maxSpeedSlider.draw(display);
        spawnRateSlider.draw(display);
        info.draw(display);
    }

    // Register slider event response
    public void updateMaxSpeedSlider(){
        if(maxSpeedSlider.hasChanged()){
            double vNew = maxSpeedSlider.getValue();
            ps.setParticlesMaxSpeed(vNew * Constants.maxSpeed);
            Constants.setCurrentMaxSpeed(vNew * Constants.maxSpeed);

            ThingBuilder.setParticleInitialVelocity((int) Math.round(vNew * Constants.maxSpeed));
            if(vNew < 0.001) {
                ps.setSpawnRate(0);
            }
        }
    }

    public void updateSpawnRateSlider(){
        if(spawnRateSlider.hasChanged()){
            int newRate = (int) Math.round(spawnRateSlider.getValue() * Constants.spawnRate);
            ps.setSpawnRate(newRate);
            Constants.setSpawnRate(newRate);
        }
    }

    // Register event handlers
    public void mousePressed() {
        particleEventHandler.mousePressed(mouseX, mouseY);
        maxSpeedSlider.handleMousePressed(mouseX, mouseY);
        spawnRateSlider.handleMousePressed(mouseX, mouseY);
    }

    public void mouseReleased() {
        particleEventHandler.mouseReleased(mouseX, mouseY);
    }

    public void mouseDragged() {
        particleEventHandler.mouseDragged(mouseX, mouseY);
        maxSpeedSlider.handleMouseDragged(mouseX, mouseY);
        spawnRateSlider.handleMousePressed(mouseX, mouseY);
    }

    public void keyPressed(){
        particleEventHandler.keyPressed(key, mouseX, mouseY);
    }

    public static void main(String[] passedArgs) {
        String[] appletArgs = new String[] {
                "graphics.cw.App"
        };
        PApplet.main(appletArgs);
    }

}