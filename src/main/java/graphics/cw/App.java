/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package graphics.cw;

import com.sun.xml.internal.xsom.impl.Const;
import graphics.cw.display.ColorPalette;
import graphics.cw.display.Display;
import graphics.cw.display.RGB;
import graphics.cw.gui.InfoButton.Info;
import graphics.cw.gui.Slider.Slider;
import graphics.cw.particles.*;
import processing.core.PApplet;

/***
 * Main app
 * Creates a particle system
 */
public class App extends PApplet {

    private int width = Constants.windowWidth;
    private int height = Constants.windowHeight;

    private Display display;
    private ParticleSystem ps;
    private ParticleMouseHandler particleMouseHandler;
    private Info info;
    private int infoPosX = 60;
    private int infoPosY = 60;
    private RGB particleColor = ColorPalette.particle;
    private RGB spawnerColor = ColorPalette.spawner;
    private RGB neagtiveFeatureColor = ColorPalette.neagtiveFeature;
    private RGB postiveFeatureColor = ColorPalette.postiveFeature;

    private Slider maxSpeedSlider;
    private Slider spawnRateSlider;
    double vOld;
    double vNew;

    public void settings() {
        size(width, height, "processing.awt.PGraphicsJava2D");
    }

    public void setup() { ;
        display = new Display(this);
        ps = new ParticleSystem();
        particleMouseHandler = new ParticleMouseHandler(ps);
        info = new Info(display, infoPosX, infoPosY);
        this.smooth();
        ps.setup();
        maxSpeedSlider = new Slider(50, height - 50);
        spawnRateSlider = new Slider(50, height - 80);

        vOld = maxSpeedSlider.getValue();
    }

    public void draw() {
        // UPDATE stuff
        ps.update();
        info.handleMouse(mouseX, mouseY);
        display.drawBackground(width, height);

        updateMaxSpeedSlider();
        updateSpawnRateSlider();

        // draw stuff
        for(Particle particle : ps.getParticles()){
            display.drawCircle(particle.getLocation(), particle.getRadius(), particleColor, 190);
        }

        for(Feature feature : ps.getFeatures()){
            if(feature.getMass() < 0){
                display.drawCircle(feature.getLocation(), feature.getRadius(), neagtiveFeatureColor);
            } else {
                display.drawCircle(feature.getLocation(), feature.getRadius(), postiveFeatureColor);
            }

        }

        for(Spawner spawner : ps.getSpawners()){
            display.drawCircle(spawner.getLocation(), spawner.getRadius(), spawnerColor);
        }

        maxSpeedSlider.draw(display);
        spawnRateSlider.draw(display);
        info.draw();
    }

    public void updateMaxSpeedSlider(){
        if(maxSpeedSlider.hasChanged()){
            vNew = maxSpeedSlider.getValue();
            ps.setParticlesMaxSpeed(vNew * Constants.maxSpeed);
            ThingBuilder.setParticleInitialVelcotiy((int) Math.round(vNew * Constants.maxSpeed));
            if(vNew < 0.001) {
                ps.setSpawnRate(0);
            }
        }
    }

    public void updateSpawnRateSlider(){
        if(spawnRateSlider.hasChanged()){
            int newRate = (int) Math.round(spawnRateSlider.getValue() * Constants.spawnRate);
            ps.setSpawnRate(newRate);
        }
    }

    public void mousePressed() {
        particleMouseHandler.mousePressed(mouseX, mouseY);
        maxSpeedSlider.handleMousePressed(mouseX, mouseY);
        spawnRateSlider.handleMousePressed(mouseX, mouseY);
    }

    public void mouseReleased() {
        particleMouseHandler.mouseReleased(mouseX, mouseY);
    }

    public void mouseDragged() {
        particleMouseHandler.mouseDragged(mouseX, mouseY);
        maxSpeedSlider.handleMouseDragged(mouseX, mouseY);
        spawnRateSlider.handleMousePressed(mouseX, mouseY);
    }

    public void keyPressed(){
        particleMouseHandler.keyPressed(key, mouseX, mouseY);
    }

    public static void main(String[] passedArgs) {
        String[] appletArgs = new String[] {
                "graphics.cw.App"
        };
        PApplet.main(appletArgs);
    }

}